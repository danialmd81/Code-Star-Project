version: "3.8"

services:
  pg-0:
    image: bitnami/postgresql-repmgr:15
    env_file:
      - ../../.env
    environment:
      - REPMGR_NODE_NAME=pg-0
      - REPMGR_NODE_NETWORK_NAME=pg-0
    configs:
      - source: init_script
        target: /docker-entrypoint-initdb.d/01-init.sql
    volumes:
      - database_data:/bitnami/postgresql
    networks:
      - etl_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=database"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      # resources:
      #   limits:
      #     cpus: "1"
      #     memory: 1G
      #   reservations:
      #     cpus: "0.5"
      #     memory: 512M

  pg-1:
    image: bitnami/postgresql-repmgr:15
    entrypoint: ["/bin/bash", "/replica-wait-for-primary.sh"]
    env_file:
      - ../../.env
    environment:
      - REPMGR_NODE_NAME=pg-1
      - REPMGR_NODE_NETWORK_NAME=pg-1
    configs:
      - source: replica_init_script
        target: /docker-entrypoint-initdb.d/01-pg-1-init.sql
      - source: replica_wait_for_primary
        target: /replica-wait-for-primary.sh
    volumes:
      - replica_data:/bitnami/postgresql
    networks:
      - etl_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=database"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "1"
      #     memory: 1G
      #   reservations:
      #     cpus: "0.5"
      #     memory: 512M

  # HAProxy for database
  database:
    image: haproxy:alpine
    entrypoint: ["/bin/sh", "/haproxy-entrypoint.sh"]
    configs:
      - source: ha_proxy_config
        target: /usr/local/etc/haproxy/haproxy.cfg
      - source: haproxy_entrypoint
        target: /haproxy-entrypoint.sh
    # ports:
    # - "5432:5432"
    networks:
      - etl_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=database"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == master-1

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres_exporter:exporterpass@database:5432/postgres?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - etl_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=database"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  # can't have both http and https port ready
  pgadmin:
    image: dpage/pgadmin4:9.5
    secrets:
      - source: ssl_cert
        target: /certs/server.cert
      - source: ssl_key
        target: /certs/server.key
    env_file:
      - ../../.env
    ports:
      - "5050:80"
      - "5051:443"
    networks:
      - etl_network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=database"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.5"
      #     memory: 512M
      #   reservations:
      #     cpus: "0.25"
      #     memory: 256M

  backup:
    image: prodrigestivill/postgres-backup-local:17-alpine
    env_file:
      - ../../.env
    volumes:
      - ./backups:/backups
    networks:
      - etl_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=database"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.5"
      #     memory: 512M
      #   reservations:
      #     cpus: "0.25"
      #     memory: 256M

networks:
  etl_network:
    external: true

volumes:
  database_data:
    driver: local
    name: database_data
  replica_data:
    driver: local
    name: replica_data
  pgadmin_data:
    driver: local
    name: pgadmin_data

configs:
  init_script:
    file: ./init/01-init.sql
  replica_init_script:
    file: ./replica-init/01-init.sql
  ha_proxy_config:
    file: ./haproxy.cfg
  haproxy_entrypoint:
    file: ./haproxy-entrypoint.sh
  replica_wait_for_primary:
    file: ./replica-wait-for-primary.sh

secrets:
  ssl_cert:
    file: ../../secrets/fullchain.pem
  ssl_key:
    file: ../../secrets/privkey.pem
