version: "3.8"

services:
  alertmanager:
    image: prom/alertmanager:v0.26.0
    env_file:
      - ../../.env
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    configs:
      - source: alertmanager_config
        target: /etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    networks:
      - etl_network
    volumes:
      - alertmanager_data:/alertmanager
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.25"
      #     memory: 256M
      #   reservations:
      #     cpus: "0.1"
      #     memory: 128M

  grafana:
    image: grafana/grafana:11.5
    user: "root:root"
    configs:
      - source: grafana_dashboards_config
        target: /etc/grafana/provisioning/dashboards/dashboards.yml
      - source: grafana_datasources_config
        target: /etc/grafana/provisioning/datasources/datasources.yml
      - source: grafana_dashboard_cadvisor
        target: /var/lib/grafana/dashboards/cadvisor.json
      - source: grafana_dashboard_containers
        target: /var/lib/grafana/dashboards/containers.json
      - source: grafana_dashboard_node
        target: /var/lib/grafana/dashboards/node.json
      - source: grafana_dashboard_postgres
        target: /var/lib/grafana/dashboards/postgres.json
      - source: grafana_dashboard_swarm
        target: /var/lib/grafana/dashboards/swarm.json
    ports:
      - "3000:3000"
    networks:
      - etl_network
    volumes:
      - grafana_data:/var/lib/grafana
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.5"
      #     memory: 512M
      #   reservations:
      #     cpus: "0.25"
      #     memory: 256M

  loki:
    image: grafana/loki:3.1.0
    command: -config.file=/etc/loki/local-config.yaml -config.expand-env=true
    configs:
      - source: loki_config
        target: /etc/loki/local-config.yaml
    user: "root:root"
    # ports:
    # - "3100:3100"
    networks:
      - etl_network
    volumes:
      - loki_data:/tmp/loki
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == manager
      # resources:
      #   limits:
      #     cpus: "0.5"
      #     memory: 512M
      #   reservations:
      #     cpus: "0.25"
      #     memory: 256M

  otel-collector:
    image: otel/opentelemetry-collector:0.132.0
    command: ["--config=/etc/otelcol/config.yaml"]
    configs:
      - source: otel_collector_config
        target: /etc/otelcol/config.yaml
    ports:
      - "8889:8889" # Prometheus exporter endpoint
      - "4318:4318" # OTLP HTTP
    networks:
      - etl_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.5"
      #     memory: 512M
      #   reservations:
      #     cpus: "0.25"
      #     memory: 256M

  prometheus:
    image: prom/prometheus:v3.5.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
      # - source: prometheus_rule
      # target: /etc/prometheus/rules/main.yml
    ports:
      - "9090:9090"
    networks:
      - etl_network
    volumes:
      - prometheus_data:/prometheus
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "1"
      #     memory: 1G
      #   reservations:
      #     cpus: "0.5"
      #     memory: 512M

  promtail:
    image: grafana/promtail:2.9.3
    command: -config.file=/etc/promtail/promtail.yaml
    configs:
      - source: promtail_config
        target: /etc/promtail/promtail.yaml
    ports:
      - "9080:9080"
    networks:
      - etl_network
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux
      # resources:
      #   limits:
      #     cpus: "0.25"
      #     memory: 256M
      #   reservations:
      #     cpus: "0.1"
      #     memory: 128M

  cadvisor:
    image: bitnami/cadvisor:0.53.0
    user: "root:root"
    command:
      - --docker_only=true
      - --housekeeping_interval=10s
    ports:
      - "8080:8080"
    networks:
      - etl_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux
      # resources:
      #   limits:
      #     memory: 256M
      #   reservations:
      #     memory: 128M

  node-exporter:
    image: prom/node-exporter:v1.6.0
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--path.rootfs=/rootfs"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    ports:
      - "9100:9100"
    networks:
      - etl_network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux
      # resources:
      #   limits:
      #     memory: 128M
      #   reservations:
      #     memory: 64M

networks:
  etl_network:
    external: true
    name: etl_network

volumes:
  alertmanager_data:
    driver: local
    name: alertmanager_data
  grafana_data:
    driver: local
    name: grafana_data
  loki_data:
    driver: local
    name: loki_data
  prometheus_data:
    driver: local
    name: prometheus_data

configs:
  alertmanager_config:
    file: ./alertmanager/alertmanager.yml
  grafana_dashboards_config:
    file: ./grafana/provisioning/dashboards/dashboards.yml
  grafana_datasources_config:
    file: ./grafana/provisioning/datasources/datasources.yml
  grafana_dashboard_cadvisor:
    file: ./grafana/dashboards/cadvisor.json
  grafana_dashboard_containers:
    file: ./grafana/dashboards/containers.json
  grafana_dashboard_node:
    file: ./grafana/dashboards/node.json
  grafana_dashboard_postgres:
    file: ./grafana/dashboards/postgres.json
  grafana_dashboard_swarm:
    file: ./grafana/dashboards/docker-swarm.json
  loki_config:
    file: ./loki/local-config.yaml
  otel_collector_config:
    file: ./otel-collector/config.yaml
  prometheus_config:
    file: ./prometheus/prometheus.yml
  # prometheus_rule:
  # file: ./prometheus/rules/alerts.yml
  promtail_config:
    file: ./promtail/promtail.yaml
