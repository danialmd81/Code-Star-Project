version: "3.8"

services:
  node-exporter:
    image: prom/node-exporter:v1.6.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--path.rootfs=/rootfs"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    # ports:
    # - "9100:9100"
    networks:
      - etl-network
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux
      # resources:
      #   limits:
      #     memory: 128M
      #   reservations:
      #     memory: 64M

  cadvisor:
    image: bitnami/cadvisor:0.53.0
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    privileged: true
    # TODO #23 find a way to use cadvisor without root
    user: root
    userns_mode: host
    # ports:
    # - "8080:8080"
    networks:
      - etl-network
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux
      # resources:
      #   limits:
      #     memory: 256M
      #   reservations:
      #     memory: 128M

  otel-collector:
    image: otel/opentelemetry-collector:0.132.0
    command: ["--config=/etc/otelcol/config.yaml"]
    configs:
      - source: otel_collector_config
        target: /etc/otelcol/config.yaml
    networks:
      - etl-network
    ports:
      - "8889:8889" # Prometheus exporter endpoint
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "13133:13133" # Health check endpoint
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.5"
      #     memory: 512M
      #   reservations:
      #     cpus: "0.25"
      #     memory: 256M

  prometheus:
    image: prom/prometheus:v3.5.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    volumes:
      - prometheus-data:/prometheus
    networks:
      - etl-network
    # ports:
    # - "9090:9090"
    depends_on:
      - otel-collector
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "1"
      #     memory: 1G
      #   reservations:
      #     cpus: "0.5"
      #     memory: 512M

  loki:
    image: grafana/loki:3.1.0
    command: -config.file=/etc/loki/local-config.yaml
    configs:
      - source: loki_config
        target: /etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
    networks:
      - etl-network
    # ports:
    # - "3100:3100"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.5"
      #     memory: 512M
      #   reservations:
      #     cpus: "0.25"
      #     memory: 256M

  promtail:
    image: grafana/promtail:2.9.3
    command: -config.file=/etc/promtail/promtail-config.yaml
    configs:
      - source: promtail_config
        target: /etc/promtail/promtail-config.yaml
    volumes:
      - /var/log:/var/log:ro
    networks:
      - etl-network
    # ports:
    # - "9080:9080" # Promtail ready endpoint (optional, for health checks)
    depends_on:
      - loki
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.25"
      #     memory: 256M
      #   reservations:
      #     cpus: "0.1"
      #     memory: 128M

  grafana:
    image: grafana/grafana:11.5
    # configs:
    # - source: grafana_provisioning_1
    # target: /etc/grafana/provisioning/file
    # - source: grafana_dashboards_1
    # target: /var/lib/grafana/dashboards/file.json
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - etl-network
    # ports:
    # - "3000:3000"
    depends_on:
      - prometheus
      - loki
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-q",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.5"
      #     memory: 512M
      #   reservations:
      #     cpus: "0.25"
      #     memory: 256M

  alertmanager:
    image: prom/alertmanager:v0.26.0
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    # configs:
    # - source: alertmanager_config
    # target: /etc/alertmanager/alertmanager.yml
    networks:
      - etl-network
    # ports:
    # - "9093:9093"
    depends_on:
      - prometheus
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-q",
          "--tries=1",
          "--spider",
          "http://localhost:9093/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.25"
      #     memory: 256M
      #   reservations:
      #     cpus: "0.1"
      #     memory: 128M

networks:
  etl-network:
    name: etl-network

volumes:
  prometheus-data:
    driver: local
    name: prometheus-data
  grafana-data:
    driver: local
    name: grafana-data
  loki-data:
    driver: local
    name: loki-data

configs:
  otel_collector_config:
    file: ./otel-collector/config.yaml
  prometheus_config:
    file: ./prometheus/prometheus.yml
  promtail_config:
    file: ./promtail/promtail-config.yaml
  loki_config:
    file: ./loki/local-config.yaml
  grafana_provisioning_1:
    file: ./grafana/provisioning/file
  grafana_dashboards_1:
    file: ./grafana/dashboards/file.json
  alertmanager_config:
    file: ./alertmanager/alertmanager.yml
