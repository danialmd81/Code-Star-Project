version: "3.8"

services:
  # -----------------------------------------------
  # Backend
  # -----------------------------------------------

  # -----------------------------------------------
  # Database
  # -----------------------------------------------
  pg-0:
    image: bitnami/postgresql-repmgr:15
    env_file:
      - .env
    environment:
      - REPMGR_NODE_NAME=pg-0
      - REPMGR_NODE_NETWORK_NAME=pg-0
    configs:
      - source: init_script
        target: /docker-entrypoint-initdb.d/01-init.sql
    volumes:
      - database_data:/bitnami/postgresql
    networks:
      - etl_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=database"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      # resources:
      #   limits:
      #     cpus: "1"
      #     memory: 1G
      #   reservations:
      #     cpus: "0.5"
      #     memory: 512M

  pg-1:
    image: bitnami/postgresql-repmgr:15
    env_file:
      - .env
    environment:
      - REPMGR_NODE_NAME=pg-1
      - REPMGR_NODE_NETWORK_NAME=pg-1
    configs:
      - source: replica_init_script
        target: /docker-entrypoint-initdb.d/01-pg-1-init.sql
    volumes:
      - replica_data:/bitnami/postgresql
    networks:
      - etl_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=database"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "1"
      #     memory: 1G
      #   reservations:
      #     cpus: "0.5"
      #     memory: 512M

  # HAProxy for database
  database:
    image: haproxy:alpine
    configs:
      - source: ha_proxy_config
        target: /usr/local/etc/haproxy/haproxy.cfg
    # ports:
    # - "5432:5432"
    networks:
      - etl_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=database"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == master-1

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres_exporter:exporterpass@database:5432/postgres?sslmode=disable"
    # ports:
    #   - "9187:9187"
    networks:
      - etl_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=database"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  # can't have both http and https port ready
  pgadmin:
    image: dpage/pgadmin4:9.5
    secrets:
      - source: ssl_cert
        target: /certs/server.cert
      - source: ssl_key
        target: /certs/server.key
    env_file:
      - .env
    # ports:
    # - "5050:80"
    # - "5051:443"
    networks:
      - etl_network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=database"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.5"
      #     memory: 512M
      #   reservations:
      #     cpus: "0.25"
      #     memory: 256M

  backup:
    image: prodrigestivill/postgres-backup-local:17-alpine
    env_file:
      - .env
    volumes:
      - /home/danial/backups:/backups
    networks:
      - etl_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=database"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.5"
      #     memory: 512M
      #   reservations:
      #     cpus: "0.25"
      #     memory: 256M

  # -----------------------------------------------
  # Frontend
  # -----------------------------------------------

  # -----------------------------------------------
  # Keycloak
  # -----------------------------------------------
  keycloak:
    image: keycloak/keycloak:26.1
    command:
      - start
      - --import-realm
      - --proxy-headers=xforwarded
    env_file:
      - .env
    environment:
      # JVM settings
      JAVA_OPTS_APPEND: >-
        -Xms1g -Xmx2g
        -XX:MetaspaceSize=96m
        -XX:MaxMetaspaceSize=256m
        -XX:+ParallelRefProcEnabled
        -XX:+UseStringDeduplication
        -Djava.net.preferIPv4Stack=true
    configs:
      - source: team1_realm
        target: /opt/keycloak/data/import/team1_realm.json
      - source: team2_realm
        target: /opt/keycloak/data/import/team2_realm.json
      - source: team3_realm
        target: /opt/keycloak/data/import/team3_realm.json
    secrets:
      - source: ssl_cert
        target: /etc/ssl/certs/fullchain.pem
      - source: ssl_key
        target: /etc/ssl/private/privkey.pem
        # ports:
        # - "8080:8080"
        # - "8443:8443"
    networks:
      - etl_network
    volumes:
      - keycloak_themes:/opt/keycloak/themes
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=keycloak"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "1"
      #     memory: 2G
      #   reservations:
      #     cpus: "0.5"
      #     memory: 1G

  # -----------------------------------------------
  # Monitoring
  # -----------------------------------------------
  alertmanager:
    image: prom/alertmanager:v0.26.0
    env_file:
      - .env
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    configs:
      - source: alertmanager_config
        target: /etc/alertmanager/alertmanager.yml
    # ports:
    # - "9093:9093"
    networks:
      - etl_network
    volumes:
      - alertmanager_data:/alertmanager
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.25"
      #     memory: 256M
      #   reservations:
      #     cpus: "0.1"
      #     memory: 128M

  grafana:
    image: grafana/grafana:11.5
    user: "root:root"
    configs:
      - source: grafana_dashboards_config
        target: /etc/grafana/provisioning/dashboards/dashboards.yml
      - source: grafana_datasources_config
        target: /etc/grafana/provisioning/datasources/datasources.yml
      - source: grafana_dashboard_cadvisor
        target: /var/lib/grafana/dashboards/cadvisor.json
      - source: grafana_dashboard_containers
        target: /var/lib/grafana/dashboards/containers.json
      - source: grafana_dashboard_node
        target: /var/lib/grafana/dashboards/node.json
      - source: grafana_dashboard_postgres
        target: /var/lib/grafana/dashboards/postgres.json
      - source: grafana_dashboard_swarm
        target: /var/lib/grafana/dashboards/swarm.json
    # ports:
    # - "3000:3000"
    networks:
      - etl_network
    volumes:
      - grafana_data:/var/lib/grafana
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.5"
      #     memory: 512M
      #   reservations:
      #     cpus: "0.25"
      #     memory: 256M

  loki:
    image: grafana/loki:3.1.0
    command: -config.file=/etc/loki/local-config.yaml
    configs:
      - source: loki_config
        target: /etc/loki/local-config.yaml
    user: "root:root"
    # ports:
    # - "3100:3100"
    networks:
      - etl_network
    volumes:
      - loki_data:/tmp/loki
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == manager
      # resources:
      #   limits:
      #     cpus: "0.5"
      #     memory: 512M
      #   reservations:
      #     cpus: "0.25"
      #     memory: 256M

  otel-collector:
    image: otel/opentelemetry-collector:0.132.0
    command: ["--config=/etc/otelcol/config.yaml"]
    configs:
      - source: otel_collector_config
        target: /etc/otelcol/config.yaml
    # ports:
    # - "8889:8889" # Prometheus exporter endpoint
    # - "4318:4318" # OTLP HTTP
    networks:
      - etl_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.5"
      #     memory: 512M
      #   reservations:
      #     cpus: "0.25"
      #     memory: 256M

  prometheus:
    image: prom/prometheus:v3.5.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
      # - source: prometheus_rule
      # target: /etc/prometheus/rules/main.yml
    # ports:
    # - "9090:9090"
    networks:
      - etl_network
    volumes:
      - prometheus_data:/prometheus
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "1"
      #     memory: 1G
      #   reservations:
      #     cpus: "0.5"
      #     memory: 512M

  promtail:
    image: grafana/promtail:2.9.3
    command: -config.file=/etc/promtail/promtail.yaml
    configs:
      - source: promtail_config
        target: /etc/promtail/promtail.yaml
    # ports:
    # - "9080:9080"
    networks:
      - etl_network
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux
      # resources:
      #   limits:
      #     cpus: "0.25"
      #     memory: 256M
      #   reservations:
      #     cpus: "0.1"
      #     memory: 128M

  cadvisor:
    image: bitnami/cadvisor:0.53.0
    user: "root:root"
    command:
      - --docker_only=true
      - --housekeeping_interval=10s
    # ports:
    # - "8080:8080"
    networks:
      - etl_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux
      # resources:
      #   limits:
      #     memory: 256M
      #   reservations:
      #     memory: 128M

  node-exporter:
    image: prom/node-exporter:v1.6.0
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--path.rootfs=/rootfs"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    # ports:
    # - "9100:9100"
    networks:
      - etl_network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=monitoring"
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux
      # resources:
      #   limits:
      #     memory: 128M
      #   reservations:
      #     memory: 64M

  # -----------------------------------------------
  # Nginx
  # -----------------------------------------------
  nginx:
    image: nginx:stable-alpine
    env_file:
      - .env
    configs:
      - source: nginx_conf
        target: /etc/nginx/nginx.conf
      - source: database_conf
        target: /etc/nginx/conf.d/database.conf
      - source: monitoring_conf
        target: /etc/nginx/conf.d/monitoring.conf
      - source: keycloak.conf
        target: /etc/nginx/conf.d/keycloak.conf
      - source: registry_conf
        target: /etc/nginx/conf.d/registry.conf
    secrets:
      - source: ssl_cert
        target: /etc/ssl/certs/fullchain.pem
      - source: ssl_key
        target: /etc/ssl/private/privkey.pem
      - source: registry-auth
        target: /etc/registry/auth/admin
    ports:
      - "80:80" # nginx HTTP
      - "443:443" # nginx HTTPS
    networks:
      - etl_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=nginx"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.hostname == master-2
      # restart_policy:
      #   condition: on-failure
      # resources:
      #   limits:
      #     cpus: "0.25"
      #     memory: 256M
      #   reservations:
      #     cpus: "0.1"
      #     memory: 128M

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:1.4
    command:
      - -nginx.scrape-uri=http://nginx:9113/stub_status
      - -web.listen-address=:9113
    # ports:
    # - "9113:9113"
    networks:
      - etl_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=nginx"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.hostname == master-2
      # restart_policy:
      #   condition: on-failure
      # resources:
      #   limits:
      #     cpus: "0.25"
      #     memory: 256M
      #   reservations:
      #     cpus: "0.1"
      #     memory: 128M

    # Certificate renewal service
  certbot:
    image: certbot/certbot:latest
    env_file:
      - .env
    environment:
      - DOMAIN=dockerize.ir
      - EMAIL=danialmobinidh81@gmail.com
    volumes:
      - /home/danial/dockerize.ir:/etc/letsencrypt/live/dockerize.ir:rw
      - /home/danial/certbot/www:/var/www/certbot:rw
    networks:
      - etl_network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot --quiet && kill -HUP $$(pidof nginx); sleep 12h & wait $${!}; done;'"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=nginx"
    deploy:
      placement:
        constraints:
          - node.hostname == master-2
  # -----------------------------------------------
  # Registry
  # -----------------------------------------------
  registry:
    image: registry:2
    env_file:
      - .env
    secrets:
      - source: ssl_cert
        target: /etc/ssl/certs/fullchain.pem
      - source: ssl_key
        target: /etc/ssl/private/privkey.pem
      - source: registry-auth
        target: /etc/registry/auth/admin
    # ports:
    # - "5000:5000"
    networks:
      - etl_network
    volumes:
      - registry_data:/var/lib/registry
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=registry"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  # -----------------------------------------------
  # Spark
  # -----------------------------------------------
  spark-master:
    image: bitnami/spark:3.5.0
    env_file:
      - .env
    environment:
      - SPARK_MODE=master
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=spark-master
      - OTEL_RESOURCE_ATTRIBUTES=service.name=spark-master,deployment.environment=production
    configs:
      - source: spark_defaults
        target: /opt/bitnami/spark/conf/spark-defaults.conf
      - source: spark_metrics
        target: /opt/bitnami/spark/conf/metrics.properties
    secrets:
      - source: ssl_cert
        target: /opt/bitnami/spark/conf/cert.pem
      - source: ssl_key
        target: /opt/bitnami/spark/conf/key.pem
    ports:
      - "8080:8080" # Web UI
      - "8443:8443" # Web SSL
      - "7077:7077" # Spark master port
    networks:
      - etl_network
    volumes:
      - spark_data:/bitnami
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=spark"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # restart_policy:
      #   condition: on-failure
      # resources:
      #   limits:
      #     cpus: "1"
      #     memory: 1G
      #   reservations:
      #     cpus: "0.5"
      #     memory: 512M

  # Spark worker nodes
  spark-worker:
    image: bitnami/spark:3.5.0
    env_file:
      - .env
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=spark-worker
      - OTEL_RESOURCE_ATTRIBUTES=service.name=spark-worker,deployment.environment=production
    configs:
      - source: spark_defaults
        target: /opt/bitnami/spark/conf/spark-defaults.conf
      - source: spark_metrics
        target: /opt/bitnami/spark/conf/metrics.properties
    secrets:
      - source: ssl_cert
        target: /opt/bitnami/spark/conf/cert.pem
      - source: ssl_key
        target: /opt/bitnami/spark/conf/key.pem
    ports:
      - "7080:8080" # Worker Web UI
      - "7443:8443" # Worker SSL
    networks:
      - etl_network
    volumes:
      - spark_worker_data:/bitnami
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=spark"
    deploy:
      mode: replicated
      replicas: 2 # Start with 2 workers, adjust based on your needs
      placement:
        constraints:
          - node.role == worker
        preferences:
          - spread: node.id
      # restart_policy:
      #   condition: on-failure
      # resources:
      #   limits:
      #     cpus: "1"
      #     memory: 1G
      #   reservations:
      #     cpus: "0.5"
      #     memory: 512M

  # Spark History Server for job history and logs
  spark-history-server:
    image: bitnami/spark:3.5.0
    command:
      - /opt/bitnami/spark/sbin/start-history-server.sh
    env_file:
      - .env
    environment:
      - SPARK_MODE=master # Using master mode for the history server
      - SPARK_HISTORY_FS_LOG_DIRECTORY=file:///spark-logs
    configs:
      - source: spark_defaults
        target: /opt/bitnami/spark/conf/spark-defaults.conf
    ports:
      - "6080:8080" # History Server UI
      - "6443:8443" # History Server SSL
    networks:
      - etl_network
    volumes:
      - spark_history_data:/spark-logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        labels: "service=spark"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # resources:
      #   limits:
      #     cpus: "0.25"
      #     memory: 256M
      #   reservations:
      #     cpus: "0.1"
      #     memory: 128M

# -----------------------------------------------
# Networks
# -----------------------------------------------
networks:
  etl_network:
    driver: overlay
    attachable: true
    name: etl_network

# -----------------------------------------------
# Volumes
# -----------------------------------------------
volumes:
  database_data:
    driver: local
    name: database_data
    driver_opts:
      type: nfs
      o: addr=master-2,rw
      device: ":/srv/docker/volumes/database_data"
  replica_data:
    driver: local
    name: replica_data
    driver_opts:
      type: nfs
      o: addr=master-1,rw
      device: ":/srv/docker/volumes/replica_data"
  pgadmin_data:
    driver: local
    name: pgadmin_data
    driver_opts:
      type: nfs
      o: addr=master-1,rw
      device: ":/srv/docker/volumes/pgadmin_data"
  backup_data:
    driver: local
    name: backup_data
    driver_opts:
      type: nfs
      o: addr=worker1,rw
      device: ":/srv/docker/volumes/backup"

  keycloak_themes:
    driver: local
    name: keycloak_themes
    driver_opts:
      type: nfs
      o: addr=master-2,rw
      device: ":/srv/docker/volumes/keycloak_themes"

  prometheus_data:
    driver: local
    driver_opts:
      type: nfs
      o: addr=master-2,rw
      device: ":/srv/docker/volumes/prometheus_data"
  grafana_data:
    driver: local
    name: grafana_data
    driver_opts:
      type: nfs
      o: addr=master-1,rw
      device: ":/srv/docker/volumes/grafana_data"
  loki_data:
    driver: local
    name: loki_data
    driver_opts:
      type: nfs
      o: addr=worker1,rw
      device: ":/srv/docker/volumes/loki_data"
  alertmanager_data:
    driver: local
    name: alertmanager_data
    driver_opts:
      type: nfs
      o: addr=worker1,rw
      device: ":/srv/docker/volumes/alertmanager_data"

  # master-2
  # certbot
  # /home/danial/dockerize.ir
  # /home/danial/certbot/www

  registry_data:
    driver: local
    name: registry_data
    driver_opts:
      type: nfs
      o: addr=master-1,rw
      device: ":/srv/docker/volumes/registry_data"

  spark_data:
    driver: local
    name: spark_data
    driver_opts:
      type: nfs
      o: addr=master-2,rw
      device: ":/srv/docker/volumes/spark_data"
  spark_worker_data:
    driver: local
    name: spark_worker_data
    driver_opts:
      type: nfs
      o: addr=worker1,rw
      device: ":/srv/docker/volumes/spark_worker_data"
  spark_history_data:
    driver: local
    name: spark_history_data
    driver_opts:
      type: nfs
      o: addr=master-2,rw
      device: ":/srv/docker/volumes/spark_history_data"
# -----------------------------------------------
# Secrets
# -----------------------------------------------
secrets:
  ssl_cert:
    file: ./secrets/fullchain.pem
  ssl_key:
    file: ./secrets/privkey.pem

  registry-auth:
    file: ./services/registry/auth/admin
# -----------------------------------------------
# Configs
# -----------------------------------------------
configs:
  init_script:
    file: ./services/database/init/01-init.sql
  replica_init_script:
    file: ./services/database/replica-init/01-init.sql
  ha_proxy_config:
    file: ./services/database/haproxy.cfg

  etl_project_realm:
    file: ./services/keycloak/realm-config/etl-project-realm.json
  team1_realm:
    file: ./services/keycloak/realm-config/team1-realm.json
  team2_realm:
    file: ./services/keycloak/realm-config/team2-realm.json
  team3_realm:
    file: ./services/keycloak/realm-config/team3-realm.json

  alertmanager_config:
    file: ./services/monitoring/alertmanager/alertmanager.yml
  grafana_dashboards_config:
    file: ./services/monitoring/grafana/provisioning/dashboards/dashboards.yml
  grafana_datasources_config:
    file: ./services/monitoring/grafana/provisioning/datasources/datasources.yml
  grafana_dashboard_cadvisor:
    file: ./services/monitoring/grafana/dashboards/cadvisor.json
  grafana_dashboard_containers:
    file: ./services/monitoring/grafana/dashboards/containers.json
  grafana_dashboard_node:
    file: ./services/monitoring/grafana/dashboards/node.json
  grafana_dashboard_postgres:
    file: ./services/monitoring/grafana/dashboards/postgres.json
  grafana_dashboard_docker-swarm:
    file: ./services/monitoring/grafana/dashboards/docker-swarm.json
  loki_config:
    file: ./services/monitoring/loki/local-config.yaml
  otel_collector_config:
    file: ./services/monitoring/otel-collector/config.yaml
  prometheus_config:
    file: ./services/monitoring/prometheus/prometheus.yml
  # prometheus_rule:
  # file: ./services/monitoring/prometheus/rules/alerts.yml
  promtail_config:
    file: ./services/monitoring/promtail/promtail.yaml

  nginx_conf:
    file: ./services/nginx/nginx.conf
  database_conf:
    file: ./services/nginx/conf.d/database.conf
  monitoring_conf:
    file: ./services/nginx/conf.d/monitoring.conf
  keycloak.conf:
    file: ./services/nginx/conf.d/keycloak.conf
  registry_conf:
    file: ./services/nginx/conf.d/registry.conf

  spark_defaults:
    file: ./services/spark/conf/spark-defaults.conf
  spark_metrics:
    file: ./services/spark/conf/metrics.properties
