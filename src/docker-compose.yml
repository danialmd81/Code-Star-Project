services:
  # -----------------------------------------------
  # Backend Services
  # -----------------------------------------------

  # -----------------------------------------------
  # Database Services
  # -----------------------------------------------
  centraldb:
    extends:
      file: ./services/database/docker-compose.yml
      service: centraldb
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
          - node.labels.storage == high
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "1"
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
  # -----------------------------------------------
  # Frontend Services
  # -----------------------------------------------

  # -----------------------------------------------
  # Keycloak Services
  # -----------------------------------------------
  keycloak:
    extends:
      file: ./services/keycloak/docker-compose.yml
      service: keycloak
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "2"
          memory: 3G
        reservations:
          cpus: "1"
          memory: 2G

  # -------------------------------------------------
  # Monitoring Services
  # -------------------------------------------------
  # Prometheus Monitoring
  prometheus:
    extends:
      file: ./services/monitoring/docker-compose.yml
      service: prometheus
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Grafana Dashboards
  grafana:
    extends:
      file: ./services/monitoring/docker-compose.yml
      service: grafana
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # OpenTelemetry Collector
  otel-collector:
    extends:
      file: ./services/monitoring/docker-compose.yml
      service: otel-collector
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Alert Manager
  alertmanager:
    extends:
      file: ./services/monitoring/docker-compose.yml
      service: alertmanager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Node Exporter (one per physical node)
  node-exporter:
    extends:
      file: ./services/monitoring/docker-compose.yml
      service: node-exporter
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # cAdvisor for container metrics
  cadvisor:
    extends:
      file: ./services/monitoring/docker-compose.yml
      service: cadvisor
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Loki Logging
  loki:
    extends:
      file: ./services/monitoring/docker-compose.yml
      service: loki
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Promtail for log shipping
  promtail:
    extends:
      file: ./services/monitoring/docker-compose.yml
      service: promtail
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # -------------------------------------------------
  # Nginx Services
  # -------------------------------------------------
  nginx:
    extends:
      file: ./services/nginx/docker-compose.yml
      service: nginx
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M

  certbot:
    extends:
      file: ./services/keyfront/docker-compose.yml
      service: certbot
    deploy:
      placement:
        constraints:
          - node.role == worker

  # -----------------------------------------------
  # Spark Services
  # -----------------------------------------------
  spark-master:
    extends:
      file: ./services/spark/docker-compose.yml
      service: spark-master
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
          - node.labels.compute == high
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "1"
          memory: 1G
      restart_policy:
        condition: on-failure

  # Spark Workers
  spark-worker:
    extends:
      file: ./services/spark/docker-compose.yml
      service: spark-worker
    deploy:
      mode: replicated
      replicas: 2 # Start with 2 workers, adjust based on your needs
      placement:
        constraints:
          - node.role == worker
          - node.labels.compute == high
        preferences:
          - spread: node.id
      resources:
        limits:
          cpus: "2"
          memory: 3G
        reservations:
          cpus: "1"
          memory: 2G
      restart_policy:
        condition: on-failure

  # Spark History Server
  spark-history-server:
    extends:
      file: ./services/spark/docker-compose.yml
      service: spark-history-server
    deploy:
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          cpus: "0.2"
          memory: 512M

# -----------------------------------------------
# Networks
# -----------------------------------------------
networks:
  etl-network:
    driver: overlay
    attachable: true
    name: etl-network
  monitoring-network:
    driver: overlay
    attachable: true
    name: monitoring-network

# -----------------------------------------------
# Volumes
# -----------------------------------------------
volumes:
  centraldb_data:
    driver: local
    name: centraldb_data

  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local

  keycloak_themes:
    driver: local
    name: keycloak_themes
  frontend_data:
    driver: local
    name: frontend_data

  spark-data:
    driver: local
    name: spark_data
  spark-worker-data:
    driver: local
    name: spark_worker_data

  loki-data:
    driver: local
    name: loki_data
# -----------------------------------------------
# Secrets
# -----------------------------------------------
# secrets:
# postgres_password:
# file: ../../secrets/postgres_password
# Add additional secrets as needed
# ssl_cert:
#   file: ./secrets/ssl_cert.pem
# ssl_key:
#   file: ./secrets/ssl_key.pem
