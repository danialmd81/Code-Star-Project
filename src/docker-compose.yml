version: "3.8"

services:
  # -----------------------------------------------
  # Backend
  # -----------------------------------------------

  # -----------------------------------------------
  # Database
  # -----------------------------------------------
  database:
    image: bitnami/postgresql-repmgr:15
    container_name: database
    env_file:
      - .env
    environment:
      - REPMGR_NODE_NAME=database-1
      - REPMGR_NODE_NETWORK_NAME=database
    configs:
      source: init_script
      target: /docker-entrypoint-initdb.d/01-init.sql
    volumes:
      - database_data:/bitnami/postgresql
    networks:
      - etl-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 5s
      retries: 5

  # TODO #22 use a load balancer or virtual IP to always point to the current primary, regardless of which container it is.
  replica:
    image: bitnami/postgresql-repmgr:15
    container_name: replica
    env_file:
      - .env
    environment:
      - REPMGR_NODE_NAME=replica-2
      - REPMGR_NODE_NETWORK_NAME=replica
    configs:
      source: replica_init_script
      target: /docker-entrypoint-initdb.d/01-replica-init.sql
    volumes:
      - replica_data:/bitnami/postgresql
    networks:
      - etl-network

  backup:
    image: prodrigestivill/postgres-backup-local
    container_name: backup
    environment:
      POSTGRES_HOST: database
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

      # POSTGRES_DB: ${POSTGRES_DB:-etl_db}
      # POSTGRES_USER: ${POSTGRES_USER:-postgres}
      # POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}

      SCHEDULE: "0 3 * * *"
      BACKUP_KEEP_DAYS: 7
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 6
    volumes:
      - ./backups:/backups
    networks:
      - etl-network
    depends_on:
      - database

  # -----------------------------------------------
  # Frontend
  # -----------------------------------------------

  # -----------------------------------------------
  # Keycloak
  # -----------------------------------------------
  keycloak:
    image: quay.io/keycloak/keycloak:26.3
    command:
      - start
      - --import-realm
      - --proxy-headers=xforwarded
      # - --hostname-debug=true
    depends_on:
      - database
    env_file:
      - .env
    environment:
      # JVM settings
      JAVA_OPTS_APPEND: >-
        -Xms1g -Xmx2g
        -XX:MetaspaceSize=96m
        -XX:MaxMetaspaceSize=256m
        -XX:+ParallelRefProcEnabled
        -XX:+UseStringDeduplication
        -Djava.net.preferIPv4Stack=true
    volumes:
      - keycloak_themes:/opt/keycloak/themes
    configs:
      - source: team1_realm
        target: /opt/keycloak/data/import/team1_realm.json
      - source: team2_realm
        target: /opt/keycloak/data/import/team2_realm.json
      - source: team3_realm
        target: /opt/keycloak/data/import/team3_realm.json
    secrets:
      - ssl_cert
      - ssl_key
    ports:
      - "8080:8080"
      - "8443:8443"
    networks:
      - etl-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: "2"
          memory: 3G
        reservations:
          cpus: "1"
          memory: 2G
      # restart_policy:
      #   condition: on-failure

  # -----------------------------------------------
  # Monitoring
  # -----------------------------------------------

  # -----------------------------------------------
  # Nginx
  # -----------------------------------------------
  nginx:
    image: nginx:stable-alpine
    depends_on:
      - keycloak
    env_file:
      - .env
    configs:
      - source: nginx_conf
        target: /etc/nginx/nginx.conf
      - source: keycloak.conf
        target: /etc/nginx/conf.d/keycloak.conf
    secrets:
      - ssl_cert
      - ssl_key
    ports:
      - "80:80"
      - "443:443"
    networks:
      - etl-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M
      # restart_policy:
      #   condition: on-failure

  # -----------------------------------------------
  # Spark
  # -----------------------------------------------
  spark-master:
    image: bitnami/spark:3.5.0
    env_file:
      - .env
    environment:
      - SPARK_MODE=master
    # ports:
    #   - "8080:8080" # Web UI
    #   - "7077:7077" # Spark master port
    configs:
      - source: spark-defaults
        target: /opt/bitnami/spark/conf/spark-defaults.conf
      - source: spark-metrics
        target: /opt/bitnami/spark/conf/metrics.properties
    volumes:
      - spark-data:/bitnami
      # TODO #21 find a way for binding ./data in docker swarm cluster
      - ./data:/data
    networks:
      - etl-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "1"
          memory: 1G
      # restart_policy:
      #   condition: on-failure

  # Spark worker nodes
  spark-worker:
    image: bitnami/spark:3.5.0
    depends_on:
      - spark-master
    env_file:
      - .env
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    # ports:
    #   - "8081:8081" # Worker Web UI
    volumes:
      - spark-worker-data:/bitnami
      # TODO #21 find a way for binding ./data in docker swarm cluster
      - ./data:/data
    networks:
      - etl-network
    deploy:
      mode: replicated
      replicas: 2 # Start with 2 workers, adjust based on your needs
      placement:
        constraints:
          - node.role == worker
          - node.labels.compute == high
        preferences:
          - spread: node.id
      resources:
        limits:
          cpus: "2"
          memory: 3G
        reservations:
          cpus: "1"
          memory: 2G
      # restart_policy:
      #   condition: on-failure

    # Spark History Server for job history and logs
    spark-history-server:
      image: bitnami/spark:3.5.0
      command:
        - /opt/bitnami/spark/sbin/start-history-server.sh
      env_file:
        - .env
      environment:
        - SPARK_MODE=master # Using master mode for the history server
        - SPARK_HISTORY_FS_LOG_DIRECTORY=file:///spark-logs
      # ports:
      #   - "18080:18080" # History Server UI
      configs:
        - source: spark-defaults
          target: /opt/bitnami/spark/conf/spark-defaults.conf
      volumes:
        # TODO #21 find a way for binding ./data in docker swarm cluster
        - ./spark-logs:/spark-logs
      networks:
        - etl-network
      deploy:
        placement:
          constraints:
            - node.role == worker
        resources:
          limits:
            cpus: "0.5"
            memory: 1G
          reservations:
            cpus: "0.2"
            memory: 512M

# -----------------------------------------------
# Networks
# -----------------------------------------------
networks:
  etl-network:
    driver: overlay
    attachable: true
    name: etl-network

  monitoring-network:
    driver: overlay
    attachable: true
    name: monitoring-network

# -----------------------------------------------
# Volumes
# -----------------------------------------------
volumes:
  database_data:
    driver: local
    name: database_data
  replica_data:
    driver: local
    name: replica_data
  patroni_data:
    driver: local
    name: patroni_data

  frontend_data:
    driver: local
    name: frontend_data

  keycloak_themes:
    driver: local
    name: keycloak_themes

  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  loki-data:
    driver: local
    name: loki_data

  spark-data:
    driver: local
    name: spark_data
  spark-worker-data:
    driver: local
    name: spark_worker_data

# -----------------------------------------------
# Secrets
# -----------------------------------------------
secrets:
  ssl_cert:
    file: ./secrets/fullchain.pem
  ssl_key:
    file: ./secrets/privkey.pem
# -----------------------------------------------
# Configs
# -----------------------------------------------
configs:
  init_script:
    file: ./services/database/init/01-init.sql
  replica_init_script:
    file: ./services/database/replica-init/01-replica-init.sql

  etl_project_realm:
    file: ./services/keycloak/realm-config/etl-project-realm.json
  team1_realm:
    file: ./services/keycloak/realm-config/team1-realm.json
  team2_realm:
    file: ./services/keycloak/realm-config/team2-realm.json
  team3_realm:
    file: ./services/keycloak/realm-config/team3-realm.json

  nginx_conf:
    file: ./services/nginx/nginx.conf
  keycloak.conf:
    file: ./services/nginx/conf.d/keycloak.conf

  spark-defaults:
    file: ./services/spark/conf/spark-defaults.conf
  spark-metrics:
    file: ./services/spark/conf/metrics.properties
